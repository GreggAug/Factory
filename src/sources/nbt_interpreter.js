    function isValidNBTChar(input){
        const specialChars = [',','[',']','{','}',':','"','\'','`'," "]
        if (specialChars.indexOf(input) == -1){
            return true
        }
    }

    function parseNBT(input){   // There is a bug involving arrays containing dictionaries not closing, will look into
        // Parses NBT
        // When I was writing this only I and God knew how it works, now only God Knows.

        let reader = 0
        function parseNBT_recursive(inputRecursive){
            let nbtIN = inputRecursive
            let returnValue
            let read = ''
            for(; reader < nbtIN.length; reader++){
                if(isValidNBTChar(nbtIN[reader])) {
                    read += nbtIN[reader]
                }
                else{
                    switch(nbtIN[reader]){
                        case ',':
                            if(returnValue == undefined) returnValue = read
                            if(returnValue == '') returnValue = undefined
                            console.log(returnValue, ",")
                            return returnValue
                            
                        case '}':
                            if(returnValue == undefined) returnValue = read
                            if(read == '') returnValue = undefined
                            console.log(returnValue, "}")
                            return returnValue
            
                        case '{':
                            reader += 1
                            returnValue = parseNBT_recursive(nbtIN)
                            if(returnValue == undefined) returnValue = {}
                            console.log(returnValue, "{")
                        return returnValue
                        
                        case ':':{
                            reader += 1
                            if(returnValue == undefined) returnValue = {}
                            returnValue[read] = parseNBT_recursive(nbtIN)
                            read = ""
                            break
                        }
                        
                        case '"':{
                            for(;nbtIN[reader] != "\""; reader++){
                                read += nbtIN[reader]
                            }
                            read += '\"'
                            break
                        }
                        
                        case '\'':{
                            for(;nbtIN[reader] != '\''; reader++){
                                read += nbtIN[reader]
                            }
                            read += '\''
                            break
                        }
                        
                        case '[':{
                            returnValue = []
                            reader += 1
                            while(true){
                                toPush = parseNBT_recursive(nbtIN)
                                if(toPush != undefined) returnValue.push(toPush)
                                reader += 1
                                if(toPush == undefined){
                                    console.log(returnValue, "[")
                                    return returnValue
                                }
                            }
                        }
                        
                        case ']':{
                            if(returnValue == undefined) returnValue = read
                            if(read == '') returnValue = undefined
                            console.log(returnValue, "]")
                            return returnValue
                            
                        }
                            
                    }
                }
            }
            console.log(returnValue, "none")
            return returnValue
        }
    
        let toParse = input
        return parseNBT_recursive(toParse) 
    }

    // Compiles a dictionary into a NBT String, I actually know how this one works
    function compileNBT(input){
        returnValue = compileJSON(input)
        returnValue = returnValue.replaceAll('\n', "")
        returnValue = returnValue.replaceAll('\t', "")
        returnValue = returnValue.replaceAll('\\\"', "つREALMANSSTRING,つNOTTHATSTUPIDJSONAUTOGENERATEDONEつ") // Praying nobody has this string in their nbt,
        returnValue = returnValue.replaceAll('\"', "")                                                        // threw in some つs to make sure
        returnValue = returnValue.replaceAll('つREALMANSSTRING,つNOTTHATSTUPIDJSONAUTOGENERATEDONEつ', "\"")         
        return returnValue
    }

    function createLibFromPath(a, endNbt){
        const path = a
        let nbt = {}
        let rootNbt = nbt
        for (p of path) {
            if(p == path[path.length-1]) nbt[p] = endNbt
            else nbt[p] = {}
            nbt = nbt[p]
        }
        console.log(rootNbt, endNbt)
        return rootNbt
    }